df <- read.csv2("machinelearning.csv", header = T, sep = ",")
df.clean <- df[,c('num_window',	'roll_belt',	'pitch_belt',	'yaw_belt',	'total_accel_belt','gyros_belt_x',	'gyros_belt_y',	'gyros_belt_z',	'accel_belt_x',	'accel_belt_y',	'accel_belt_z',	'magnet_belt_x',	'magnet_belt_y',	'magnet_belt_z',	'roll_arm',	'pitch_arm',	'yaw_arm',	'total_accel_arm','gyros_arm_x',	'gyros_arm_y',	'gyros_arm_z',	'accel_arm_x',	'accel_arm_y',	'accel_arm_z',	'magnet_arm_x',	'magnet_arm_y',	'magnet_arm_z','roll_dumbbell',	'pitch_dumbbell',	'yaw_dumbbell','total_accel_dumbbell','gyros_dumbbell_x',	'gyros_dumbbell_y',	'gyros_dumbbell_z',	'accel_dumbbell_x',	'accel_dumbbell_y',	'accel_dumbbell_z',	'magnet_dumbbell_x',	'magnet_dumbbell_y',	'magnet_dumbbell_z',	'roll_forearm',	'pitch_forearm',	'yaw_forearm','total_accel_forearm','gyros_forearm_x',	'gyros_forearm_y',	'gyros_forearm_z',	'accel_forearm_x',	'accel_forearm_y',	'accel_forearm_z',	'magnet_forearm_x',	'magnet_forearm_y',	'magnet_forearm_z',	'classe')]
n <- length(df.clean)
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.integer(df.clean[,i])
}
}
View(df.clean)
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.double(df.clean[,i])
}
}
View(df.clean)
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.double(df.clean[,i])
} else if(is.double(df.clean[,i] == TRUE)) {
df.clean[,i] <- as.double(df.clean[,i])
}
}
View(df.clean)
is.double(df.clean[,"yaw_belt"])
str(df.clean[,"yaw_belt"])
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.double(df.clean[,i])
} else {
df.clean[,i] <- as.double(df.clean[,i])
}
}
View(df.clean)
df.clean <- df[,c('num_window',	'roll_belt',	'pitch_belt',	'yaw_belt',	'total_accel_belt','gyros_belt_x',	'gyros_belt_y',	'gyros_belt_z',	'accel_belt_x',	'accel_belt_y',	'accel_belt_z',	'magnet_belt_x',	'magnet_belt_y',	'magnet_belt_z',	'roll_arm',	'pitch_arm',	'yaw_arm',	'total_accel_arm','gyros_arm_x',	'gyros_arm_y',	'gyros_arm_z',	'accel_arm_x',	'accel_arm_y',	'accel_arm_z',	'magnet_arm_x',	'magnet_arm_y',	'magnet_arm_z','roll_dumbbell',	'pitch_dumbbell',	'yaw_dumbbell','total_accel_dumbbell','gyros_dumbbell_x',	'gyros_dumbbell_y',	'gyros_dumbbell_z',	'accel_dumbbell_x',	'accel_dumbbell_y',	'accel_dumbbell_z',	'magnet_dumbbell_x',	'magnet_dumbbell_y',	'magnet_dumbbell_z',	'roll_forearm',	'pitch_forearm',	'yaw_forearm','total_accel_forearm','gyros_forearm_x',	'gyros_forearm_y',	'gyros_forearm_z',	'accel_forearm_x',	'accel_forearm_y',	'accel_forearm_z',	'magnet_forearm_x',	'magnet_forearm_y',	'magnet_forearm_z',	'classe')]
View(df.clean)
str(df.clean)
View(df.clean)
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.double(df.clean[,i])
} else {
df.clean[,i] <- as.double(df.clean[,i])
}
}
View(df.clean)
df.clean <- df[,c('num_window',	'roll_belt',	'pitch_belt',	'yaw_belt',	'total_accel_belt','gyros_belt_x',	'gyros_belt_y',	'gyros_belt_z',	'accel_belt_x',	'accel_belt_y',	'accel_belt_z',	'magnet_belt_x',	'magnet_belt_y',	'magnet_belt_z',	'roll_arm',	'pitch_arm',	'yaw_arm',	'total_accel_arm','gyros_arm_x',	'gyros_arm_y',	'gyros_arm_z',	'accel_arm_x',	'accel_arm_y',	'accel_arm_z',	'magnet_arm_x',	'magnet_arm_y',	'magnet_arm_z','roll_dumbbell',	'pitch_dumbbell',	'yaw_dumbbell','total_accel_dumbbell','gyros_dumbbell_x',	'gyros_dumbbell_y',	'gyros_dumbbell_z',	'accel_dumbbell_x',	'accel_dumbbell_y',	'accel_dumbbell_z',	'magnet_dumbbell_x',	'magnet_dumbbell_y',	'magnet_dumbbell_z',	'roll_forearm',	'pitch_forearm',	'yaw_forearm','total_accel_forearm','gyros_forearm_x',	'gyros_forearm_y',	'gyros_forearm_z',	'accel_forearm_x',	'accel_forearm_y',	'accel_forearm_z',	'magnet_forearm_x',	'magnet_forearm_y',	'magnet_forearm_z',	'classe')]
View(df.clean)
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.numeric(df.clean[,i])
}
}
View(df.clean)
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE || is.factor(df.clean[,1] == T)) {
df.clean[,i] <- as.numeric(df.clean[,i])
}
}
View(df)
View(df.clean)
is.double(df.clean[,"yaw_belt"])
is.factor(df.clean[,"yaw_belt"])
as.double(df.clean[,"yaw_belt"])
as.double(df.clean[1,"yaw_belt"])
as.double(df.clean[,"yaw_belt"])
c <- as.double(df.clean[,"yaw_belt"])
##Convert to Integer all strings that are numeric
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.numeric(df.clean[,i])
} else if(is.factor(df.clean[,i] == T) {
df.clean[, i] <- as.numeric(levels(df.clean[,i]))
}
}
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.numeric(df.clean[,i])
} else if(is.factor(df.clean[,i] == T) {
df.clean[, i] <- as.numeric(levels(df.clean[,i])[f])
}
}
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.numeric(df.clean[,i])
} else if(is.factor(df.clean[,i]) == T) {
df.clean[, i] <- as.numeric(levels(df.clean[,i])[f])
}
}
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.numeric(df.clean[,i])
} else if(is.factor(df.clean[,i]) == T) {
df.clean[, i] <- as.numeric(levels(df.clean[,i]))
}
}
df.clean <- df[,c('num_window',	'roll_belt',	'pitch_belt',	'yaw_belt',	'total_accel_belt','gyros_belt_x',	'gyros_belt_y',	'gyros_belt_z',	'accel_belt_x',	'accel_belt_y',	'accel_belt_z',	'magnet_belt_x',	'magnet_belt_y',	'magnet_belt_z',	'roll_arm',	'pitch_arm',	'yaw_arm',	'total_accel_arm','gyros_arm_x',	'gyros_arm_y',	'gyros_arm_z',	'accel_arm_x',	'accel_arm_y',	'accel_arm_z',	'magnet_arm_x',	'magnet_arm_y',	'magnet_arm_z','roll_dumbbell',	'pitch_dumbbell',	'yaw_dumbbell','total_accel_dumbbell','gyros_dumbbell_x',	'gyros_dumbbell_y',	'gyros_dumbbell_z',	'accel_dumbbell_x',	'accel_dumbbell_y',	'accel_dumbbell_z',	'magnet_dumbbell_x',	'magnet_dumbbell_y',	'magnet_dumbbell_z',	'roll_forearm',	'pitch_forearm',	'yaw_forearm','total_accel_forearm','gyros_forearm_x',	'gyros_forearm_y',	'gyros_forearm_z',	'accel_forearm_x',	'accel_forearm_y',	'accel_forearm_z',	'magnet_forearm_x',	'magnet_forearm_y',	'magnet_forearm_z',	'classe')]
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.numeric(df.clean[,i])
} else if(is.factor(df.clean[,i]) == T) {
df.clean[, i] <- as.numeric(levels(df.clean[,i])[df.clean[,i]])
}
}
View(df.clean)
is.na(df.clean)
df.clean <- df[,c('num_window',	'roll_belt',	'pitch_belt',	'yaw_belt',	'total_accel_belt','gyros_belt_x',	'gyros_belt_y',	'gyros_belt_z',	'accel_belt_x',	'accel_belt_y',	'accel_belt_z',	'magnet_belt_x',	'magnet_belt_y',	'magnet_belt_z',	'roll_arm',	'pitch_arm',	'yaw_arm',	'total_accel_arm','gyros_arm_x',	'gyros_arm_y',	'gyros_arm_z',	'accel_arm_x',	'accel_arm_y',	'accel_arm_z',	'magnet_arm_x',	'magnet_arm_y',	'magnet_arm_z','roll_dumbbell',	'pitch_dumbbell',	'yaw_dumbbell','total_accel_dumbbell','gyros_dumbbell_x',	'gyros_dumbbell_y',	'gyros_dumbbell_z',	'accel_dumbbell_x',	'accel_dumbbell_y',	'accel_dumbbell_z',	'magnet_dumbbell_x',	'magnet_dumbbell_y',	'magnet_dumbbell_z',	'roll_forearm',	'pitch_forearm',	'yaw_forearm','total_accel_forearm','gyros_forearm_x',	'gyros_forearm_y',	'gyros_forearm_z',	'accel_forearm_x',	'accel_forearm_y',	'accel_forearm_z',	'magnet_forearm_x',	'magnet_forearm_y',	'magnet_forearm_z',	'classe')]
n <- n - 1
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.numeric(df.clean[,i])
} else if(is.factor(df.clean[,i]) == T) {
df.clean[, i] <- as.numeric(levels(df.clean[,i])[df.clean[,i]])
}
}
View(df.clean)
library(caret); library(rattle); library(ggplot2)
df <- read.csv2("machinelearning.csv", header = T, sep = ",")
df.clean <- df[,c('num_window',	'roll_belt',	'pitch_belt',	'yaw_belt',	'total_accel_belt','gyros_belt_x',	'gyros_belt_y',	'gyros_belt_z',	'accel_belt_x',	'accel_belt_y',	'accel_belt_z',	'magnet_belt_x',	'magnet_belt_y',	'magnet_belt_z',	'roll_arm',	'pitch_arm',	'yaw_arm',	'total_accel_arm','gyros_arm_x',	'gyros_arm_y',	'gyros_arm_z',	'accel_arm_x',	'accel_arm_y',	'accel_arm_z',	'magnet_arm_x',	'magnet_arm_y',	'magnet_arm_z','roll_dumbbell',	'pitch_dumbbell',	'yaw_dumbbell','total_accel_dumbbell','gyros_dumbbell_x',	'gyros_dumbbell_y',	'gyros_dumbbell_z',	'accel_dumbbell_x',	'accel_dumbbell_y',	'accel_dumbbell_z',	'magnet_dumbbell_x',	'magnet_dumbbell_y',	'magnet_dumbbell_z',	'roll_forearm',	'pitch_forearm',	'yaw_forearm','total_accel_forearm','gyros_forearm_x',	'gyros_forearm_y',	'gyros_forearm_z',	'accel_forearm_x',	'accel_forearm_y',	'accel_forearm_z',	'magnet_forearm_x',	'magnet_forearm_y',	'magnet_forearm_z',	'classe')]
n <- length(df.clean)
n <- n - 1
##Convert to Integer all strings that are numeric
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.numeric(df.clean[,i])
} else if(is.factor(df.clean[,i]) == T) {
df.clean[, i] <- as.numeric(levels(df.clean[,i])[df.clean[,i]])
}
}
is.na(df.clean)
is.na(df.clean) == T
is.na(df.clean) == F
k <- 0
n <- length(df.clean)
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.numeric(df.clean[,i])
} else if(is.factor(df.clean[,i]) == T) {
df.clean[, i] <- as.numeric(levels(df.clean[,i])[df.clean[,i]])
}
}
- 1
df <- read.csv2("machinelearning.csv", header = T, sep = ",")
df.clean <- df[,c('num_window',	'roll_belt',	'pitch_belt',	'yaw_belt',	'total_accel_belt','gyros_belt_x',	'gyros_belt_y',	'gyros_belt_z',	'accel_belt_x',	'accel_belt_y',	'accel_belt_z',	'magnet_belt_x',	'magnet_belt_y',	'magnet_belt_z',	'roll_arm',	'pitch_arm',	'yaw_arm',	'total_accel_arm','gyros_arm_x',	'gyros_arm_y',	'gyros_arm_z',	'accel_arm_x',	'accel_arm_y',	'accel_arm_z',	'magnet_arm_x',	'magnet_arm_y',	'magnet_arm_z','roll_dumbbell',	'pitch_dumbbell',	'yaw_dumbbell','total_accel_dumbbell','gyros_dumbbell_x',	'gyros_dumbbell_y',	'gyros_dumbbell_z',	'accel_dumbbell_x',	'accel_dumbbell_y',	'accel_dumbbell_z',	'magnet_dumbbell_x',	'magnet_dumbbell_y',	'magnet_dumbbell_z',	'roll_forearm',	'pitch_forearm',	'yaw_forearm','total_accel_forearm','gyros_forearm_x',	'gyros_forearm_y',	'gyros_forearm_z',	'accel_forearm_x',	'accel_forearm_y',	'accel_forearm_z',	'magnet_forearm_x',	'magnet_forearm_y',	'magnet_forearm_z',	'classe')]
n <- length(df.clean)
n <- n - 1
##Convert to Integer all strings that are numeric
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.numeric(df.clean[,i])
} else if(is.factor(df.clean[,i]) == T) {
df.clean[, i] <- as.numeric(levels(df.clean[,i])[df.clean[,i]])
}
}
k <- matrix(0, ncol = n)
for (i in 1:n) {
if(is.na(df.clean[,i]) == TRUE){
k[,i] <- i
}
}
for (i in 1:n) {
if(is.na(df.clean[,i]) == TRUE){
k[1,i] <- i
}
}
View(k)
df.clean[,i]) == TRUE
is.na(df.clean[,i]) == TRUE
colSums(is.na(df.clean))
test <- df.clean[,2:5]
test2 <- rowsum(test)
test2 <- rowSums(test)
test2[,2] <- df.clean[,54]
test2 <- list(0, nrow(19622, ncol(2)))
test2 <- list(0, nrow(19622), ncol(2))
test2[,1] <- rowSums(test)
test2[,2] <- matrix(df.clean[,54]
test2[,2] <- matrix(df.clean[,54])
test2[,2] <- matrix(df.clean[,54])
test2[,2] <- df.clean[,54]
df.clean[,54]
length(df.clean[,1])
View(test)
test2 <- matrix(, nrow = 19622, ncol = 2)
test2[,1] <- rowSums(test)
test2[,2] <- df.clean[,54]
View(test2)
test2 <- list(, nrow = 19622, ncol = 2)
test2 <- list( nrow = 19622, ncol = 2)
test2[,1] <- rowSums(test)
test2 <- matrix(, nrow = 19622, ncol = 2)
test2[,1] <- rowSums(test)
test2[,2] <- df.clean[,54]
View(test2)
test2[,2] <- as.factor(df.clean[,54])
View(test2)
test2 <- matrix(nrow = 19622, ncol = 2)
ls(test)
rm(test2)
test2[,1] <- rowSums(test)
test[,2]
test2[,2]
test2 <- data.frame()
test2[,1] <- rowSums(test)
test2[,2] <- as.factor(df.clean[,54])
View(test2)
str(df)
test2[,1] <- data.frame(rowSums(test))
test2 <- data.frame(rowSums(test))
test2[,2] <- as.factor(df.clean[,54])
View(test2)
View(test2)
gx <- ggplot(test2, aes(rowsSums.test., v2))
gx + geom_boxplot()
test2[,1] <- names(Test)
test2[,1] <- names("Test")
View(test2)
names(test2[,1]) <- c("test")
View(test2)
names(test2[,2]) <- "test"
names(test2[,1]) <- "test"
View(test2)
names(test2[,1]) <- c("test")
View(test2)
test2[,1] <- rowSums(test)
test2[,2] <- as.factor(df.clean[,54])
names(test2) <- c("test", "v2")
View(test2)
gx <- ggplot(test2, aes(test, v2))
gx + geom_boxplot()
gx <- ggplot(test2, aes(v2, test))
gx + geom_boxplot()
gx + geom_point(aes(color = factor(classe)))
gx + geom_point(aes(color = factor(v2)))
test2[,1] <- test[,2] * test[,3]
test2[,1] <- test[,2] * test[,3] * test[,4] * test[,5]
test2[,1] <- test[,2] * test[,3] * test[,4] * test[,1]
test2[,2] <- as.factor(df.clean[,54])
names(test2) <- c("test", "v2")
gx <- ggplot(test2, aes(v2, test))
gx + geom_boxplot()
test2[,1] <- test[,2] *  test[,1]
names(test2) <- c("test", "v2")
is.factor(df.clean[,"yaw_belt"])
gx + geom_boxplot()
test2[,1] <- rowSums(test)
test2[,2] <- as.factor(df.clean[,54])
gx + geom_boxplot()
test2[,1] <- rowSums(test)
test2[,2] <- as.factor(df.clean[,54])
gx <- ggplot(test2, aes(v2, test))
gx + geom_point(aes(color = factor(v2)))
gx + geom_boxplot()
View(test)
test[,5] <- df.clean[,54]
View(test)
gx <- ggplot(test, aes(roll_belt, v2))
gx + geom_boxplot()
gx <- ggplot(test, aes(roll_belt, v5))
gx + geom_boxplot()
gx <- ggplot(test, aes(roll_belt, V5))
gx + geom_boxplot()
gx <- ggplot(test, aes(v5, roll_belt))
gx + geom_boxplot()
gx <- ggplot(test, aes(V5, roll_belt))
gx + geom_boxplot()
gx <- ggplot(test, aes(V5, roll_belt))
gx + geom_boxplot()
df.clean[,54]
View(df)
hist(df.clean[,1])
hist(df.clean[,1:10])
hist(df.clean[,2])
df.test <- (df.clean - mean(df.clean)) / sd(df.clean)
df.test <- (df.clean[,1] - mean(df.clean[,1])) / sd(df.clean[,1])
hist(df.clean[,2])
hist(df.clean[,1])
hist(df.test[,1])
hist(df.test)
mean(df.test)
sd(df.test)
df.test <- (df.clean[,2] - mean(df.clean[,2])) / sd(df.clean[,2])
hist(df.test)
mean(df.test)
sd(df.test)
df.test <- (df.clean[,3] - mean(df.clean[,3])) / sd(df.clean[,3])
hist(df.test)
mean(df.test)
sd(df.test)
hist(df.clean)
hist(df.clean[,3])
set.seed(1)
df.test[,2] <- df.clean[,54]
?preProcess
library(caret); library(rattle); library(ggplot2)
?preProcess
df <- read.csv2("machinelearning.csv", header = T, sep = ",")
set.seed(1)
df.clean <- df[,c('num_window',	'roll_belt',	'pitch_belt',	'yaw_belt',	'total_accel_belt','gyros_belt_x',	'gyros_belt_y',	'gyros_belt_z',	'accel_belt_x',	'accel_belt_y',	'accel_belt_z',	'magnet_belt_x',	'magnet_belt_y',	'magnet_belt_z',	'roll_arm',	'pitch_arm',	'yaw_arm',	'total_accel_arm','gyros_arm_x',	'gyros_arm_y',	'gyros_arm_z',	'accel_arm_x',	'accel_arm_y',	'accel_arm_z',	'magnet_arm_x',	'magnet_arm_y',	'magnet_arm_z','roll_dumbbell',	'pitch_dumbbell',	'yaw_dumbbell','total_accel_dumbbell','gyros_dumbbell_x',	'gyros_dumbbell_y',	'gyros_dumbbell_z',	'accel_dumbbell_x',	'accel_dumbbell_y',	'accel_dumbbell_z',	'magnet_dumbbell_x',	'magnet_dumbbell_y',	'magnet_dumbbell_z',	'roll_forearm',	'pitch_forearm',	'yaw_forearm','total_accel_forearm','gyros_forearm_x',	'gyros_forearm_y',	'gyros_forearm_z',	'accel_forearm_x',	'accel_forearm_y',	'accel_forearm_z',	'magnet_forearm_x',	'magnet_forearm_y',	'magnet_forearm_z',	'classe')]
n <- length(df.clean)
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.numeric(df.clean[,i])
} else if(is.factor(df.clean[,i]) == T) {
df.clean[, i] <- as.numeric(levels(df.clean[,i])[df.clean[,i]])
}
}
df <- read.csv2("machinelearning.csv", header = T, sep = ",")
set.seed(1)
df.clean <- df[,c('num_window',	'roll_belt',	'pitch_belt',	'yaw_belt',	'total_accel_belt','gyros_belt_x',	'gyros_belt_y',	'gyros_belt_z',	'accel_belt_x',	'accel_belt_y',	'accel_belt_z',	'magnet_belt_x',	'magnet_belt_y',	'magnet_belt_z',	'roll_arm',	'pitch_arm',	'yaw_arm',	'total_accel_arm','gyros_arm_x',	'gyros_arm_y',	'gyros_arm_z',	'accel_arm_x',	'accel_arm_y',	'accel_arm_z',	'magnet_arm_x',	'magnet_arm_y',	'magnet_arm_z','roll_dumbbell',	'pitch_dumbbell',	'yaw_dumbbell','total_accel_dumbbell','gyros_dumbbell_x',	'gyros_dumbbell_y',	'gyros_dumbbell_z',	'accel_dumbbell_x',	'accel_dumbbell_y',	'accel_dumbbell_z',	'magnet_dumbbell_x',	'magnet_dumbbell_y',	'magnet_dumbbell_z',	'roll_forearm',	'pitch_forearm',	'yaw_forearm','total_accel_forearm','gyros_forearm_x',	'gyros_forearm_y',	'gyros_forearm_z',	'accel_forearm_x',	'accel_forearm_y',	'accel_forearm_z',	'magnet_forearm_x',	'magnet_forearm_y',	'magnet_forearm_z',	'classe')]
n <- length(df.clean)
n <- n - 1
##Convert to Integer all strings that are numeric
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.numeric(df.clean[,i])
} else if(is.factor(df.clean[,i]) == T) {
df.clean[, i] <- as.numeric(levels(df.clean[,i])[df.clean[,i]])
}
}
inTrain <- createDataPartition(y=df.clean$classe, p=0.75, list = FALSE)
training <- df.clean[inTrain,]
testing <- df.clean[-inTrain,]
M <- abs(cor(training[, -54]))
diag(M) <- 0
which(M > 0.8, arr.ind = T)
plot(df.clean[,4], df.clean[,2])
plot(df.clean[,47], df.clean[,46])
str(M)
plot(df.clean[,"yaw_belt"], df.clean[,"roll_belt"])
plot(df.clean[,2], df.clean[,11])
plot(df.clean[,3], df.clean[,12])
plot(df.clean[,37], df.clean[30])
plot(df.clean[,37], df.clean[,30])
library(caret); library(rattle); library(ggplot2)
df <- read.csv2("machinelearning.csv", header = T, sep = ",")
set.seed(1)
df.clean <- df[,c('num_window',	'roll_belt',	'pitch_belt',	'yaw_belt',	'total_accel_belt','gyros_belt_x',	'gyros_belt_y',	'gyros_belt_z',	'accel_belt_x',	'accel_belt_y',	'accel_belt_z',	'magnet_belt_x',	'magnet_belt_y',	'magnet_belt_z',	'roll_arm',	'pitch_arm',	'yaw_arm',	'total_accel_arm','gyros_arm_x',	'gyros_arm_y',	'gyros_arm_z',	'accel_arm_x',	'accel_arm_y',	'accel_arm_z',	'magnet_arm_x',	'magnet_arm_y',	'magnet_arm_z','roll_dumbbell',	'pitch_dumbbell',	'yaw_dumbbell','total_accel_dumbbell','gyros_dumbbell_x',	'gyros_dumbbell_y',	'gyros_dumbbell_z',	'accel_dumbbell_x',	'accel_dumbbell_y',	'accel_dumbbell_z',	'magnet_dumbbell_x',	'magnet_dumbbell_y',	'magnet_dumbbell_z',	'roll_forearm',	'pitch_forearm',	'yaw_forearm','total_accel_forearm','gyros_forearm_x',	'gyros_forearm_y',	'gyros_forearm_z',	'accel_forearm_x',	'accel_forearm_y',	'accel_forearm_z',	'magnet_forearm_x',	'magnet_forearm_y',	'magnet_forearm_z',	'classe')]
n <- length(df.clean)
n <- n - 1
##Convert to Integer all strings that are numeric
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.numeric(df.clean[,i])
} else if(is.factor(df.clean[,i]) == T) {
df.clean[, i] <- as.numeric(levels(df.clean[,i])[df.clean[,i]])
}
}
inTrain <- createDataPartition(y=df.clean$classe, p=0.75, list = FALSE)
training <- df.clean[inTrain,]
testing <- df.clean[-inTrain,]
?train
??maxit
obj <- train(training, method = rf, preProcess = NULL, maxit = 1)
obj <- train(training, method = rf, preProcess = NULL, tuneLength = 2)
obj <- train(y = training, method = rf, preProcess = NULL, tuneLength = 2)
obj <- train(training, method = "rf", preProcess = NULL, tuneLength = 3)
obj <- train(training~., method = "rf", preProcess = NULL, tuneLength = 3)
obj <- train(training~*, method = "rf", preProcess = NULL, tuneLength = 3)
obj <- train(training~., method = "rf", preProcess = NULL, tuneLength = 3)
obj <- train(classe ~ ., date = training, method = "rf", preProcess = NULL, tuneLength = 3)
obj <- train(classe ~ ., data = training, method = "rf", preProcess = NULL, tuneLength = 3)
obj <- train(classe ~ ., data = training, method = "rf", preProcess = NULL, tuneLength = 3)
install.packages("e1071")
obj <- train(classe ~ ., data = training, method = "rf", preProcess = NULL, tuneLength = 3)
obj$results
library(caret); library(rattle); library(ggplot2)
df <- read.csv2("machinelearning.csv", header = T, sep = ",")
set.seed(1)
df.clean <- df[,c('num_window',	'roll_belt',	'pitch_belt',	'yaw_belt',	'total_accel_belt','gyros_belt_x',	'gyros_belt_y',	'gyros_belt_z',	'accel_belt_x',	'accel_belt_y',	'accel_belt_z',	'magnet_belt_x',	'magnet_belt_y',	'magnet_belt_z',	'roll_arm',	'pitch_arm',	'yaw_arm',	'total_accel_arm','gyros_arm_x',	'gyros_arm_y',	'gyros_arm_z',	'accel_arm_x',	'accel_arm_y',	'accel_arm_z',	'magnet_arm_x',	'magnet_arm_y',	'magnet_arm_z','roll_dumbbell',	'pitch_dumbbell',	'yaw_dumbbell','total_accel_dumbbell','gyros_dumbbell_x',	'gyros_dumbbell_y',	'gyros_dumbbell_z',	'accel_dumbbell_x',	'accel_dumbbell_y',	'accel_dumbbell_z',	'magnet_dumbbell_x',	'magnet_dumbbell_y',	'magnet_dumbbell_z',	'roll_forearm',	'pitch_forearm',	'yaw_forearm','total_accel_forearm','gyros_forearm_x',	'gyros_forearm_y',	'gyros_forearm_z',	'accel_forearm_x',	'accel_forearm_y',	'accel_forearm_z',	'magnet_forearm_x',	'magnet_forearm_y',	'magnet_forearm_z',	'classe')]
n <- length(df.clean)
n <- n - 1
##Convert to Integer all strings that are numeric
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.numeric(df.clean[,i])
} else if(is.factor(df.clean[,i]) == T) {
df.clean[, i] <- as.numeric(levels(df.clean[,i])[df.clean[,i]])
}
}
inTrain <- createDataPartition(y=df.clean$classe, p=0.75, list = FALSE)
training <- df.clean[inTrain,]
testing <- df.clean[-inTrain,]
?predict
library(caret); library(rattle); library(ggplot2)
df <- read.csv2("machinelearning.csv", header = T, sep = ",")
set.seed(1)
df.clean <- df[,c('num_window',	'roll_belt',	'pitch_belt',	'yaw_belt',	'total_accel_belt','gyros_belt_x',	'gyros_belt_y',	'gyros_belt_z',	'accel_belt_x',	'accel_belt_y',	'accel_belt_z',	'magnet_belt_x',	'magnet_belt_y',	'magnet_belt_z',	'roll_arm',	'pitch_arm',	'yaw_arm',	'total_accel_arm','gyros_arm_x',	'gyros_arm_y',	'gyros_arm_z',	'accel_arm_x',	'accel_arm_y',	'accel_arm_z',	'magnet_arm_x',	'magnet_arm_y',	'magnet_arm_z','roll_dumbbell',	'pitch_dumbbell',	'yaw_dumbbell','total_accel_dumbbell','gyros_dumbbell_x',	'gyros_dumbbell_y',	'gyros_dumbbell_z',	'accel_dumbbell_x',	'accel_dumbbell_y',	'accel_dumbbell_z',	'magnet_dumbbell_x',	'magnet_dumbbell_y',	'magnet_dumbbell_z',	'roll_forearm',	'pitch_forearm',	'yaw_forearm','total_accel_forearm','gyros_forearm_x',	'gyros_forearm_y',	'gyros_forearm_z',	'accel_forearm_x',	'accel_forearm_y',	'accel_forearm_z',	'magnet_forearm_x',	'magnet_forearm_y',	'magnet_forearm_z',	'classe')]
n <- length(df.clean)
n <- n - 1
##Convert to Integer all strings that are numeric
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.numeric(df.clean[,i])
} else if(is.factor(df.clean[,i]) == T) {
df.clean[, i] <- as.numeric(levels(df.clean[,i])[df.clean[,i]])
}
}
predict <- train(classe ~ ., data = training, method = "rf", prox=TRUE, preProcess = NULL, tuneLength = 3)
inTrain <- createDataPartition(y=df.clean$classe, p=0.75, list = FALSE)
training <- df.clean[inTrain,]
testing <- df.clean[-inTrain,]
predict <- train(classe ~ ., data = training, method = "rf", prox=TRUE, preProcess = NULL, tuneLength = 3)
predict <- train(classe ~ ., data = training, method = "rf", prox=TRUE, preProcess = NULL)
predict <- train(classe ~ ., data = training, method = "rf", prox=TRUE, preProcess = NULL, tuneLength = 3)
library(caret); library(rattle); library(ggplot2)
df <- read.csv2("machinelearning.csv", header = T, sep = ",")
set.seed(1)
df.clean <- df[,c('num_window',	'roll_belt',	'pitch_belt',	'yaw_belt',	'total_accel_belt','gyros_belt_x',	'gyros_belt_y',	'gyros_belt_z',	'accel_belt_x',	'accel_belt_y',	'accel_belt_z',	'magnet_belt_x',	'magnet_belt_y',	'magnet_belt_z',	'roll_arm',	'pitch_arm',	'yaw_arm',	'total_accel_arm','gyros_arm_x',	'gyros_arm_y',	'gyros_arm_z',	'accel_arm_x',	'accel_arm_y',	'accel_arm_z',	'magnet_arm_x',	'magnet_arm_y',	'magnet_arm_z','roll_dumbbell',	'pitch_dumbbell',	'yaw_dumbbell','total_accel_dumbbell','gyros_dumbbell_x',	'gyros_dumbbell_y',	'gyros_dumbbell_z',	'accel_dumbbell_x',	'accel_dumbbell_y',	'accel_dumbbell_z',	'magnet_dumbbell_x',	'magnet_dumbbell_y',	'magnet_dumbbell_z',	'roll_forearm',	'pitch_forearm',	'yaw_forearm','total_accel_forearm','gyros_forearm_x',	'gyros_forearm_y',	'gyros_forearm_z',	'accel_forearm_x',	'accel_forearm_y',	'accel_forearm_z',	'magnet_forearm_x',	'magnet_forearm_y',	'magnet_forearm_z',	'classe')]
n <- length(df.clean)
n <- n - 1
##Convert to Integer all strings that are numeric
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.numeric(df.clean[,i])
} else if(is.factor(df.clean[,i]) == T) {
df.clean[, i] <- as.numeric(levels(df.clean[,i])[df.clean[,i]])
}
}
inTrain <- createDataPartition(y=df.clean$classe, p=0.75, list = FALSE)
training <- df.clean[inTrain,]
testing <- df.clean[-inTrain,]
predict <- train(classe ~ ., data = training, method = "rf",  preProcess = NULL, tuneLength = 3)
library(caret); library(rattle); library(ggplot2)
df <- read.csv2("machinelearning.csv", header = T, sep = ",")
set.seed(1)
df.clean <- df[,c('num_window',	'roll_belt',	'pitch_belt',	'yaw_belt',	'total_accel_belt','gyros_belt_x',	'gyros_belt_y',	'gyros_belt_z',	'accel_belt_x',	'accel_belt_y',	'accel_belt_z',	'magnet_belt_x',	'magnet_belt_y',	'magnet_belt_z',	'roll_arm',	'pitch_arm',	'yaw_arm',	'total_accel_arm','gyros_arm_x',	'gyros_arm_y',	'gyros_arm_z',	'accel_arm_x',	'accel_arm_y',	'accel_arm_z',	'magnet_arm_x',	'magnet_arm_y',	'magnet_arm_z','roll_dumbbell',	'pitch_dumbbell',	'yaw_dumbbell','total_accel_dumbbell','gyros_dumbbell_x',	'gyros_dumbbell_y',	'gyros_dumbbell_z',	'accel_dumbbell_x',	'accel_dumbbell_y',	'accel_dumbbell_z',	'magnet_dumbbell_x',	'magnet_dumbbell_y',	'magnet_dumbbell_z',	'roll_forearm',	'pitch_forearm',	'yaw_forearm','total_accel_forearm','gyros_forearm_x',	'gyros_forearm_y',	'gyros_forearm_z',	'accel_forearm_x',	'accel_forearm_y',	'accel_forearm_z',	'magnet_forearm_x',	'magnet_forearm_y',	'magnet_forearm_z',	'classe')]
n <- length(df.clean)
n <- n - 1
##Convert to Integer all strings that are numeric
for (i in 1:n) {
if(is.numeric(df.clean[,i]) == TRUE) {
df.clean[,i] <- as.numeric(df.clean[,i])
} else if(is.factor(df.clean[,i]) == T) {
df.clean[, i] <- as.numeric(levels(df.clean[,i])[df.clean[,i]])
}
}
inTrain <- createDataPartition(y=df.clean$classe, p=0.75, list = FALSE)
training <- df.clean[inTrain,]
testing <- df.clean[-inTrain,]
sqrt(ncol(training))
floor(sqrt(ncol(training)))
ncol(training)
mtry <- floor(sqrt(ncol(training)))
expand.grid(.mtry = mtry)
expand.grid(.mtry = mtry)
tunegrid <- expand.grid(.mtry = mtry)
predict <- train(classe ~ ., data = training, method = "rf",  metric=metric, tuneGrid=tunegrid)
metric <- "Accuracy"
mtry <- floor(sqrt(ncol(training)))
tunegrid <- expand.grid(.mtry = mtry)
predict <- train(classe ~ ., data = training, method = "rf",  metric=metric, tuneGrid=tunegrid)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
predict <- train(classe ~ ., data = training, method = "rf",  metric=metric, tuneGrid=tunegrid, trControl=control)
plot(predict)
print(predict)
?predict
predicted <- predict(predict, testing)
predicted
?table
?confusionMatrix
confusionMatrix(predicted, testing$classe)
df2 <- read.csv2("pml-testing.csv", header = T, sep = ",")
df.clean2 <- df2[,c('num_window',	'roll_belt',	'pitch_belt',	'yaw_belt',	'total_accel_belt','gyros_belt_x',	'gyros_belt_y',	'gyros_belt_z',	'accel_belt_x',	'accel_belt_y',	'accel_belt_z',	'magnet_belt_x',	'magnet_belt_y',	'magnet_belt_z',	'roll_arm',	'pitch_arm',	'yaw_arm',	'total_accel_arm','gyros_arm_x',	'gyros_arm_y',	'gyros_arm_z',	'accel_arm_x',	'accel_arm_y',	'accel_arm_z',	'magnet_arm_x',	'magnet_arm_y',	'magnet_arm_z','roll_dumbbell',	'pitch_dumbbell',	'yaw_dumbbell','total_accel_dumbbell','gyros_dumbbell_x',	'gyros_dumbbell_y',	'gyros_dumbbell_z',	'accel_dumbbell_x',	'accel_dumbbell_y',	'accel_dumbbell_z',	'magnet_dumbbell_x',	'magnet_dumbbell_y',	'magnet_dumbbell_z',	'roll_forearm',	'pitch_forearm',	'yaw_forearm','total_accel_forearm','gyros_forearm_x',	'gyros_forearm_y',	'gyros_forearm_z',	'accel_forearm_x',	'accel_forearm_y',	'accel_forearm_z',	'magnet_forearm_x',	'magnet_forearm_y',	'magnet_forearm_z',	'classe')]
df.clean2 <- df2[,c('num_window',	'roll_belt',	'pitch_belt',	'yaw_belt',	'total_accel_belt','gyros_belt_x',	'gyros_belt_y',	'gyros_belt_z',	'accel_belt_x',	'accel_belt_y',	'accel_belt_z',	'magnet_belt_x',	'magnet_belt_y',	'magnet_belt_z',	'roll_arm',	'pitch_arm',	'yaw_arm',	'total_accel_arm','gyros_arm_x',	'gyros_arm_y',	'gyros_arm_z',	'accel_arm_x',	'accel_arm_y',	'accel_arm_z',	'magnet_arm_x',	'magnet_arm_y',	'magnet_arm_z','roll_dumbbell',	'pitch_dumbbell',	'yaw_dumbbell','total_accel_dumbbell','gyros_dumbbell_x',	'gyros_dumbbell_y',	'gyros_dumbbell_z',	'accel_dumbbell_x',	'accel_dumbbell_y',	'accel_dumbbell_z',	'magnet_dumbbell_x',	'magnet_dumbbell_y',	'magnet_dumbbell_z',	'roll_forearm',	'pitch_forearm',	'yaw_forearm','total_accel_forearm','gyros_forearm_x',	'gyros_forearm_y',	'gyros_forearm_z',	'accel_forearm_x',	'accel_forearm_y',	'accel_forearm_z',	'magnet_forearm_x',	'magnet_forearm_y',	'magnet_forearm_z')]
n2 <- length(df.clean2)
n2 <- length(df.clean2)
for (i in 1:n2) {
if(is.numeric(df.clean2[,i]) == TRUE) {
df.clean2[,i] <- as.numeric(df.clean[,i])
} else if(is.factor(df.clean[,i]) == T) {
df.clean2[, i] <- as.numeric(levels(df.clean[,i])[df.clean[,i]])
}
}
df.clean2 <- df2[,c('num_window',	'roll_belt',	'pitch_belt',	'yaw_belt',	'total_accel_belt','gyros_belt_x',	'gyros_belt_y',	'gyros_belt_z',	'accel_belt_x',	'accel_belt_y',	'accel_belt_z',	'magnet_belt_x',	'magnet_belt_y',	'magnet_belt_z',	'roll_arm',	'pitch_arm',	'yaw_arm',	'total_accel_arm','gyros_arm_x',	'gyros_arm_y',	'gyros_arm_z',	'accel_arm_x',	'accel_arm_y',	'accel_arm_z',	'magnet_arm_x',	'magnet_arm_y',	'magnet_arm_z','roll_dumbbell',	'pitch_dumbbell',	'yaw_dumbbell','total_accel_dumbbell','gyros_dumbbell_x',	'gyros_dumbbell_y',	'gyros_dumbbell_z',	'accel_dumbbell_x',	'accel_dumbbell_y',	'accel_dumbbell_z',	'magnet_dumbbell_x',	'magnet_dumbbell_y',	'magnet_dumbbell_z',	'roll_forearm',	'pitch_forearm',	'yaw_forearm','total_accel_forearm','gyros_forearm_x',	'gyros_forearm_y',	'gyros_forearm_z',	'accel_forearm_x',	'accel_forearm_y',	'accel_forearm_z',	'magnet_forearm_x',	'magnet_forearm_y',	'magnet_forearm_z')]
for (i in 1:n2) {
if(is.numeric(df.clean2[,i]) == TRUE) {
df.clean2[,i] <- as.numeric(df.clean[,i])
} else if(is.factor(df.clean2[,i]) == T) {
df.clean2[, i] <- as.numeric(levels(df.clean2[,i])[df.clean[,i]])
}
}
df.clean2 <- df2[,c('num_window',	'roll_belt',	'pitch_belt',	'yaw_belt',	'total_accel_belt','gyros_belt_x',	'gyros_belt_y',	'gyros_belt_z',	'accel_belt_x',	'accel_belt_y',	'accel_belt_z',	'magnet_belt_x',	'magnet_belt_y',	'magnet_belt_z',	'roll_arm',	'pitch_arm',	'yaw_arm',	'total_accel_arm','gyros_arm_x',	'gyros_arm_y',	'gyros_arm_z',	'accel_arm_x',	'accel_arm_y',	'accel_arm_z',	'magnet_arm_x',	'magnet_arm_y',	'magnet_arm_z','roll_dumbbell',	'pitch_dumbbell',	'yaw_dumbbell','total_accel_dumbbell','gyros_dumbbell_x',	'gyros_dumbbell_y',	'gyros_dumbbell_z',	'accel_dumbbell_x',	'accel_dumbbell_y',	'accel_dumbbell_z',	'magnet_dumbbell_x',	'magnet_dumbbell_y',	'magnet_dumbbell_z',	'roll_forearm',	'pitch_forearm',	'yaw_forearm','total_accel_forearm','gyros_forearm_x',	'gyros_forearm_y',	'gyros_forearm_z',	'accel_forearm_x',	'accel_forearm_y',	'accel_forearm_z',	'magnet_forearm_x',	'magnet_forearm_y',	'magnet_forearm_z')]
for (i in 1:n2) {
if(is.numeric(df.clean2[,i]) == TRUE) {
df.clean2[,i] <- as.numeric(df.clean2[,i])
} else if(is.factor(df.clean2[,i]) == T) {
df.clean2[, i] <- as.numeric(levels(df.clean2[,i])[df.clean[,i]])
}
}
df.clean2 <- df2[,c('num_window',	'roll_belt',	'pitch_belt',	'yaw_belt',	'total_accel_belt','gyros_belt_x',	'gyros_belt_y',	'gyros_belt_z',	'accel_belt_x',	'accel_belt_y',	'accel_belt_z',	'magnet_belt_x',	'magnet_belt_y',	'magnet_belt_z',	'roll_arm',	'pitch_arm',	'yaw_arm',	'total_accel_arm','gyros_arm_x',	'gyros_arm_y',	'gyros_arm_z',	'accel_arm_x',	'accel_arm_y',	'accel_arm_z',	'magnet_arm_x',	'magnet_arm_y',	'magnet_arm_z','roll_dumbbell',	'pitch_dumbbell',	'yaw_dumbbell','total_accel_dumbbell','gyros_dumbbell_x',	'gyros_dumbbell_y',	'gyros_dumbbell_z',	'accel_dumbbell_x',	'accel_dumbbell_y',	'accel_dumbbell_z',	'magnet_dumbbell_x',	'magnet_dumbbell_y',	'magnet_dumbbell_z',	'roll_forearm',	'pitch_forearm',	'yaw_forearm','total_accel_forearm','gyros_forearm_x',	'gyros_forearm_y',	'gyros_forearm_z',	'accel_forearm_x',	'accel_forearm_y',	'accel_forearm_z',	'magnet_forearm_x',	'magnet_forearm_y',	'magnet_forearm_z')]
for (i in 1:n2) {
if(is.numeric(df.clean2[,i]) == TRUE) {
df.clean2[,i] <- as.numeric(df.clean2[,i])
} else if(is.factor(df.clean2[,i]) == T) {
df.clean2[, i] <- as.numeric(levels(df.clean2[,i])[df.clean2[,i]])
}
}
predicted2 <- predict(predict, df.clean2)
predicted2
confusionMatrix(predicted, testing$classe)
plot(predicted2$Prediction, predicted$Reference)
str(predicted2)
confusionPredicted2 <- confusionMatrix(predicted2)
confusionPredicted2 <- confusionMatrix(predicted, testing$classe)
str(confusionPredicted)
str(confusionPredicted2)
plot(confusionPredicted2$table)
install.packages("Rmarkdown")
install.packages("rmarkdown")
setwd("~/desktop/RData/Machine Learning Final Assignment")
setwd("~/")
setwd("~/desktop/RData/Machine Learning Final Assignment")
